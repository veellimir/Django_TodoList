from datetime import datetime

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from api import *

router = Router()


class AddTaskStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_category = State()
    waiting_for_username = State()
    waiting_for_due_date = State()


@router.message(F.text == "/addtask")
async def start_add_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(AddTaskStates.waiting_for_title)


@router.message(AddTaskStates.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(AddTaskStates.waiting_for_description)


@router.message(AddTaskStates.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AddTaskStates.waiting_for_category)


@router.message(AddTaskStates.waiting_for_category)
async def process_category(message: types.Message, state: FSMContext):
    category_name = message.text
    category = await get_category_by_name(category_name)
    if not category:
        await message.answer(
            f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–Ω–æ–≤–æ:"
        )
        return
    await state.update_data(category_name=category_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AddTaskStates.waiting_for_username)


@router.message(AddTaskStates.waiting_for_username)
async def process_username(message: types.Message, state: FSMContext):
    username = message.text
    user = await get_user_by_username(username)
    if not user:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ username –∑–∞–Ω–æ–≤–æ:"
        )
        return
    await state.update_data(username=username)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await state.set_state(AddTaskStates.waiting_for_due_date)


@router.message(AddTaskStates.waiting_for_due_date)
async def process_due_date(message: types.Message, state: FSMContext):
    due_date_str = message.text
    try:
        due_date = datetime.strptime(due_date_str, "%Y-%m-%d")
        due_date_iso = due_date.isoformat()
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
            "–≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ (–ì–ì–ì–ì-–ú–ú-–î–î):"
        )
        return

    data = await state.get_data()
    title = data.get('title')
    description = data.get('description')
    category_name = data.get('category_name')
    username = data.get('username')

    success = await add_task(title, description, due_date_iso, username, category_name)

    if success:
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()


@router.message(F.text == "/tasks")
async def list_tasks(message: types.Message):
    tasks = await get_tasks(message.from_user.id)

    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return
    response = "\n\n".join(
        [f"üìå {t['title']}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {t['category']}, \n–°–æ–∑–¥–∞–Ω–∞: {t['created_at']})" for t in tasks]
    )
    await message.answer(response)
