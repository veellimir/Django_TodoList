services:
  db:
    image: postgres:17
    container_name: todo_list_db
    restart: always
    env_file: .env
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    container_name: todo_list_redis
    restart: always

  backend:
    build:
      context: .
    container_name: todo_list_backend
    command: bash -c "python manage.py migrate && python create_superuser.py && python manage.py runserver 0.0.0.0:8000"
    environment:
        - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
        - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
        - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file: .env
    depends_on:
      - db
      - redis

  celery:
    build:
      context: .
    container_name: todo_list_celery
    command: celery -A jobs.celery worker -l info
    volumes:
      - .:/app
    env_file: .env
    depends_on:
      - backend
      - redis

  celery_beat:
    build:
      context: .
    container_name: todo_list_celery_beat
    command: celery -A jobs.celery beat -l info
    volumes:
      - .:/app
    env_file: .env
    depends_on:
      - backend
      - redis

  bot:
    build:
      context: .
      dockerfile: telegram_bot/Dockerfile
    container_name: todo_list_bot
    command: python telegram_bot/bot.py
    working_dir: /app
    volumes:
      - .:/app
    env_file: .env
    depends_on:
      - backend
    environment:
      - PYTHONPATH=/app

volumes:
  postgres_data:
