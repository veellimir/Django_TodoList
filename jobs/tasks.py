import asyncio

from celery import shared_task
from django.utils.timezone import now

from apps.tasks.models import Task
from telegram_bot.notifications import send_telegram_message


def send_telegram_message_sync(telegram_id, text):
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ–Ω-—Ü–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ send_telegram_message
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    if loop.is_running():
        raise RuntimeError("Event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
    return loop.run_until_complete(send_telegram_message(telegram_id, text))


@shared_task
def notify_due_tasks():
    tasks = Task.objects.filter(due_date__lte=now())
    for task in tasks:
        user = task.user
        if user.telegram_id:
            text = (
                f"‚è∞ –í–Ω–∏–º–∞–Ω–∏—è ! –£ –≤–∞—Å deadline –ø–æ –∑–∞–¥–∞—á–µ!\n\n"
                f"üìå *{task.title}*\n"
                f"üìÖ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task.due_date.strftime('%Y-%m-%d')}"
            )
            try:
                send_telegram_message_sync(user.telegram_id, text)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

    """–í –∏–¥–µ–∞–ª–µ –º–æ–∂–Ω–æ –ø–æ–≤–µ—Å–∏—Ç—å —Ñ–ª–∞–≥ –≤ –º–æ–¥–µ–ª—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–≥–æ, 
    —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ !"""
